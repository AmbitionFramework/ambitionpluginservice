using Almanna;
using Ambition.Plugin;
using Gee;

namespace PluginService.Model.DB.Implementation {
	
	/**
	 * Almanna Implementation for class "Plugin".
	 * Generated by almanna-generate.
	 */
	public class Plugin : PluginService.Model.DB.Entity.Plugin {
		public override void register_entity() {
			base.register_entity();
		}

		public static ArrayList<Plugin> do_search( string query ) {
			var result_search = new Search<Plugin>()
				.ilike( "name", "%" + query + "%" )
				.ilike( "description", "%" + query + "%" )
				.eq( "latest", 1 )
				.order_by_raw( "( CASE WHEN name LIKE '%" + query + "%' THEN 0 WHEN description LIKE '%" + query + "%' THEN 1 END )" );
			return result_search.list();
		}

		public static Plugin? get_latest( string name ) {
			try {
				var result_search = new Search<Plugin>()
					.eq( "name", name )
					.eq( "latest", 1 )
					.single();
				return result_search;
			} catch (Error e) {}
			return null;
		}

		public static Plugin? get_newer( string name, string version ) {
			try {
				var result_search = new Search<Plugin>()
					.eq( "name", name )
					.single();
				if ( result_search != null ) {
					if ( result_search.version != version ) {
						return result_search;
					}
				}
			} catch (Error e) {}
			return null;
		}

		public static Plugin? get_with_version( string name, string version ) {
			try {
				var result_search = new Search<Plugin>()
					.eq( "name", name )
					.eq( "version", version )
					.single();
				return result_search;
			} catch (Error e) {}
			return null;
		}

		public static Plugin generate_from_source( PluginManifest manifest, File archive_file, File? documentation ) {
			var info = archive_file.query_info( FileAttribute.STANDARD_SIZE, FileQueryInfoFlags.NONE );
			var plugin = new Plugin();
			plugin.author_id = Author.get_by_author_string( manifest.author ).author_id;
			plugin.size_k = (int) info.get_size() / 1024;
			plugin.name = manifest.name;
			plugin.version = manifest.version;
			plugin.description = manifest.description;
			plugin.filename = archive_file.get_basename();
			plugin.url = manifest.url;
			plugin.date_created = new DateTime.now_utc();
			plugin.date_modified = new DateTime.now_utc();
			plugin.min_version = manifest.minimum_target_version;
			plugin.max_version = manifest.maximum_target_version;
			plugin.save();

			if ( documentation != null ) {
				var extension = documentation.get_basename().substring( documentation.get_basename().last_index_of(".") + 1 );
				var plugin_documentation = new PluginDocumentation();
				plugin_documentation.plugin_id = plugin.plugin_id;
				plugin_documentation.format = "txt";
				if ( extension == "md" || extension == "html" ) {
					plugin_documentation.format = extension;
				}
				uint8[] contents;
				string etag;
				documentation.load_contents( null, out contents, out etag );
				plugin_documentation.documentation = (string) contents;
				plugin_documentation.save();
			}

			PluginHistory.create_from_plugin(plugin);

			return plugin;
		}

		public string? author() {
			var author = new Search<Author>()
				.eq( "author_id", this.author_id )
				.single();
			if ( author != null ) {
				return "%s &lt;%s&gt;".printf( author.name, author.sanitized_email() );
			}
			return "";
		}

		public string? render_documentation() {
			var doc = new Search<PluginDocumentation>()
				.eq( "plugin_id", this.plugin_id )
				.single();
			if ( doc != null ) {
				switch ( doc.format ) {
					case "txt":
						return "<code>%s</code>".printf( doc.documentation );
					case "html":
						return doc.documentation;
					case "md":
						return PluginService.Model.PSMarkdown.process( doc.documentation );
				}
			}
			return "No documentation available.";
		}

		public ArrayList<Plugin> get_versions() {
			var plugins = new Search<Plugin>()
				.eq( "author_id", this.author_id )
				.eq( "name", this.name )
				.order_by( "date_created", true );
			return plugins.list();
		}

		public override void save() {
			if (!in_storage) {
				var plugins = get_versions();
				foreach ( var version in plugins ) {
					version.latest = 0;
					version.save();
				}
				latest = 1;
			}
			base.save();
		}
	}
}
