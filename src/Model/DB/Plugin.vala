using Almanna;
namespace PluginService.Model.DB {
	/**
	 * Almanna Entity for table "plugin".
	 * Generated by generate-schema.pl.
	 */
	public class Plugin : Almanna.Entity {
		public override string entity_name { owned get { return "plugin"; } }
		public int plugin_id { get; set; }
		public int author_id { get; set; }
		public int active { get; set; }
		public int size_k { get; set; }
		public int views { get; set; }
		public int installs { get; set; }
		public string name { get; set; }
		public string version { get; set; }
		public string description { get; set; }
		public string filename { get; set; }
		public string url { get; set; }
		public DateTime date_created { get; set; }
		public DateTime date_modified { get; set; }
		
		public override void register_entity() {
			add_column( new Column<int>.with_name_type( "plugin_id", "integer" ) );
			columns["plugin_id"].size = 4;
			
			add_column( new Column<int>.with_name_type( "author_id", "integer" ) );
			columns["author_id"].size = 4;
			
			add_column( new Column<int>.with_name_type( "active", "integer" ) );
			columns["active"].size = 4;
			columns["active"].is_nullable = true;
			
			add_column( new Column<int>.with_name_type( "size_k", "integer" ) );
			columns["size_k"].size = 4;
			columns["size_k"].is_nullable = true;
			
			add_column( new Column<int>.with_name_type( "views", "integer" ) );
			columns["views"].size = 4;
			
			add_column( new Column<int>.with_name_type( "installs", "integer" ) );
			columns["installs"].size = 4;
			
			add_column( new Column<string>.with_name_type( "name", "character varying" ) );
			columns["name"].size = 128;
			
			add_column( new Column<string>.with_name_type( "version", "character varying" ) );
			columns["version"].size = 16;
			
			add_column( new Column<string>.with_name_type( "description", "text" ) );
			
			add_column( new Column<string>.with_name_type( "filename", "character varying" ) );
			columns["filename"].size = 128;
			columns["filename"].is_nullable = true;
			
			add_column( new Column<string>.with_name_type( "url", "character varying" ) );
			columns["url"].size = 255;
			columns["url"].is_nullable = true;
			
			add_column( new Column<DateTime>.with_name_type( "date_created", "timestamp without time zone" ) );
			columns["date_created"].size = 8;
			columns["date_created"].is_nullable = true;
			
			add_column( new Column<DateTime>.with_name_type( "date_modified", "timestamp without time zone" ) );
			columns["date_modified"].size = 8;
			columns["date_modified"].is_nullable = true;
			
			try {
				set_primary_key("plugin_id");
			} catch (EntityError e) {
				stderr.printf( "Error adding primary key to entity: %s\n", e.message );
			}
		}

		public string? author() {
			var author = new Search<Author>()
				.eq( "author_id", this.author_id )
				.single();
			if ( author != null ) {
				return "%s &lt;%s&gt;".printf( author.name, author.sanitized_email() );
			}
			return "";
		}

		public string? render_documentation() {
			var doc = new Search<PluginDocumentation>()
				.eq( "plugin_id", this.plugin_id )
				.single();
			if ( doc != null ) {
				switch ( doc.format ) {
					case "txt":
						return "<code>%s</code>".printf( doc.documentation );
					case "html":
						return doc.documentation;
					case "md":
						return PluginService.Model.PSMarkdown.process( doc.documentation );
				}
			}
			return "No documentation available.";
		}
	}
}

